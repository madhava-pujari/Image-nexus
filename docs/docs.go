// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "get": {
                "description": "List of pictures along with its metadata",
                "summary": "list of pictures",
                "parameters": [
                    {
                        "type": "number",
                        "format": "number",
                        "description": "page number starting from 1",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ListPicturesResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.GeneralErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.GeneralErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Given a image file, save it \u0026 get its computed metadata",
                "consumes": [
                    "multipart/form-data"
                ],
                "summary": "save an image",
                "parameters": [
                    {
                        "type": "file",
                        "description": "upload image file",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.SinglePictureResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.GeneralErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.GeneralErrorResponse"
                        }
                    }
                }
            }
        },
        "/picture/{id}": {
            "get": {
                "description": "Get a specified image with its metadata by its ID",
                "summary": "get a single image data",
                "parameters": [
                    {
                        "type": "number",
                        "description": "Image Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.SinglePictureResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.GeneralErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.GeneralErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Given a image file and an id, update the record \u0026 get its computed metadata",
                "consumes": [
                    "multipart/form-data"
                ],
                "summary": "update an image",
                "parameters": [
                    {
                        "type": "number",
                        "description": "Image Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "upload image file",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/dto.SinglePictureResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.GeneralErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.GeneralErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.GeneralErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a specified image along with its metadata by its ID",
                "summary": "delete a single image",
                "parameters": [
                    {
                        "type": "number",
                        "description": "Image Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "$ref": "#/definitions/dto.StringResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.GeneralErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.GeneralErrorResponse"
                        }
                    }
                }
            }
        },
        "/picture/{id}/image": {
            "get": {
                "description": "Get a specified image file by its ID",
                "summary": "get a image",
                "parameters": [
                    {
                        "type": "number",
                        "description": "Image Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.GeneralErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.GeneralErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.GeneralErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "meta": {
                    "type": "object",
                    "additionalProperties": {}
                }
            }
        },
        "dto.ListPicturesResponse": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "pictures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.PictureResponse"
                    }
                },
                "total_pages": {
                    "type": "integer"
                }
            }
        },
        "dto.PictureResponse": {
            "type": "object",
            "properties": {
                "content_type": {
                    "type": "string"
                },
                "created_on": {
                    "type": "string"
                },
                "height": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "size": {
                    "type": "string"
                },
                "updated_on": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "width": {
                    "type": "integer"
                }
            }
        },
        "dto.SinglePictureResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.PictureResponse"
                }
            }
        },
        "dto.StringResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
